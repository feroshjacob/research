template(name,_vars,_ptrs, o_ptr, i_ptr_ws,size) ::=<<#include \<stdio.h\>
#include \<omp.h\>


void extern timerstart(char* name);
void extern timerend();

// Host code
<o_ptr.tType>* abstract_<name>(<_ptrs:{s|<s.parameter>}; separator=",">,<_vars:{s|<s.parameter>}; separator=",">)
{


	timerstart("OMP");
	/************
	 SAMPLE OMP CODE GOES BELOW


	int i, chunk = 100;
#pragma omp parallel shared(A,B,C,chunk) private(i)
	{
#pragma omp for schedule(dynamic,chunk) nowait
		for (i = 0; i \< TOTAL_SIZE; i++)
			C[i] = A[i] + B[i];

	}
	 *************/
	timerend();
		

        return <o_ptr.name>;
    
}
>>
