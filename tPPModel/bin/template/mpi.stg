template(name,_vars,_ptrs, o_ptr, i_ptr_ws,size) ::=<</*MPI Template */
#include \<stdio.h\>
#include \<mpi.h\>

void extern timerstart(char* name);
void extern timerend();


// Host code
<o_ptr.tType>* abstract_<name>(<_ptrs:{s|<s.parameter>}; separator=",">,<_vars:{s|<s.parameter>}; separator=",">)
{

	timerstart("MPI");
  int rank, size;

  MPI_Init (&argc, &argv);	/* starts MPI */
  MPI_Comm_rank (MPI_COMM_WORLD, &rank);	/* get current process id */
  MPI_Comm_size (MPI_COMM_WORLD, &size);	/* get number of processes */

/*********************
 Implementation goes here

**********************/

  MPI_Finalize();

	timerstart("MPI"); 
        return <o_ptr.name>;
    
}
>>