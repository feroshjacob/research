/*
* generated by Xtext
*/
grammar InternalMDP;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package cs.ua.edu.segroup.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package cs.ua.edu.segroup.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import cs.ua.edu.segroup.services.MDPGrammarAccess;

}

@parser::members {
 
 	private MDPGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(MDPGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleMDP
entryRuleMDP 
:
{ before(grammarAccess.getMDPRule()); }
	 ruleMDP
{ after(grammarAccess.getMDPRule()); } 
	 EOF 
;

// Rule MDP
ruleMDP
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMDPAccess().getGroup()); }
(rule__MDP__Group__0)
{ after(grammarAccess.getMDPAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMAP
entryRuleMAP 
:
{ before(grammarAccess.getMAPRule()); }
	 ruleMAP
{ after(grammarAccess.getMAPRule()); } 
	 EOF 
;

// Rule MAP
ruleMAP
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMAPAccess().getGroup()); }
(rule__MAP__Group__0)
{ after(grammarAccess.getMAPAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleRED
entryRuleRED 
:
{ before(grammarAccess.getREDRule()); }
	 ruleRED
{ after(grammarAccess.getREDRule()); } 
	 EOF 
;

// Rule RED
ruleRED
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getREDAccess().getGroup()); }
(rule__RED__Group__0)
{ after(grammarAccess.getREDAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__MDP__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MDP__Group__0__Impl
	rule__MDP__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MDP__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMDPAccess().getMapAssignment_0()); }
(rule__MDP__MapAssignment_0)
{ after(grammarAccess.getMDPAccess().getMapAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MDP__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MDP__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MDP__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMDPAccess().getRedAssignment_1()); }
(rule__MDP__RedAssignment_1)
{ after(grammarAccess.getMDPAccess().getRedAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__MAP__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MAP__Group__0__Impl
	rule__MAP__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MAP__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMAPAccess().getMapperKeyword_0()); }

	'mapper' 

{ after(grammarAccess.getMAPAccess().getMapperKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MAP__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MAP__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MAP__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMAPAccess().getMapCodeAssignment_1()); }
(rule__MAP__MapCodeAssignment_1)
{ after(grammarAccess.getMAPAccess().getMapCodeAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__RED__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RED__Group__0__Impl
	rule__RED__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RED__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getREDAccess().getReducerKeyword_0()); }

	'reducer' 

{ after(grammarAccess.getREDAccess().getReducerKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RED__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RED__Group__1__Impl
	rule__RED__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RED__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getREDAccess().getCodeForAssignment_1()); }
(rule__RED__CodeForAssignment_1)
{ after(grammarAccess.getREDAccess().getCodeForAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RED__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RED__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RED__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getREDAccess().getCodeRestAssignment_2()); }
(rule__RED__CodeRestAssignment_2)
{ after(grammarAccess.getREDAccess().getCodeRestAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}









rule__MDP__MapAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMDPAccess().getMapMAPParserRuleCall_0_0()); }
	ruleMAP{ after(grammarAccess.getMDPAccess().getMapMAPParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MDP__RedAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMDPAccess().getRedREDParserRuleCall_1_0()); }
	ruleRED{ after(grammarAccess.getMDPAccess().getRedREDParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MAP__MapCodeAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMAPAccess().getMapCodeCODETerminalRuleCall_1_0()); }
	RULE_CODE{ after(grammarAccess.getMAPAccess().getMapCodeCODETerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RED__CodeForAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getREDAccess().getCodeForCODETerminalRuleCall_1_0()); }
	RULE_CODE{ after(grammarAccess.getREDAccess().getCodeForCODETerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RED__CodeRestAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getREDAccess().getCodeRestCODETerminalRuleCall_2_0()); }
	RULE_CODE{ after(grammarAccess.getREDAccess().getCodeRestCODETerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_CODE : '{' ( options {greedy=false;} : . )*'}';

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


