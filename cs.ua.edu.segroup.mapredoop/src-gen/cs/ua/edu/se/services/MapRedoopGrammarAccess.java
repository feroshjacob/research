/*
* generated by Xtext
*/

package cs.ua.edu.se.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class MapRedoopGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class MapRedoopElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MapRedoop");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDeclarationAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDeclarationDeclarationParserRuleCall_0_0 = (RuleCall)cDeclarationAssignment_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cContentAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cContentContentParserRuleCall_2_0 = (RuleCall)cContentAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//MapRedoop:
		//	declaration=Declaration "{" content+=Content* "}";
		public ParserRule getRule() { return rule; }

		//declaration=Declaration "{" content+=Content* "}"
		public Group getGroup() { return cGroup; }

		//declaration=Declaration
		public Assignment getDeclarationAssignment_0() { return cDeclarationAssignment_0; }

		//Declaration
		public RuleCall getDeclarationDeclarationParserRuleCall_0_0() { return cDeclarationDeclarationParserRuleCall_0_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//content+=Content*
		public Assignment getContentAssignment_2() { return cContentAssignment_2; }

		//Content
		public RuleCall getContentContentParserRuleCall_2_0() { return cContentContentParserRuleCall_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class ContentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Content");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cEntitiesAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cEntitiesListofEntitiesParserRuleCall_0_0 = (RuleCall)cEntitiesAssignment_0.eContents().get(0);
		private final Assignment cMrBlocksAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cMrBlocksMRBlockParserRuleCall_1_0 = (RuleCall)cMrBlocksAssignment_1.eContents().get(0);
		
		//Content:
		//	entities=ListofEntities | mrBlocks=MRBlock;
		public ParserRule getRule() { return rule; }

		//entities=ListofEntities | mrBlocks=MRBlock
		public Alternatives getAlternatives() { return cAlternatives; }

		//entities=ListofEntities
		public Assignment getEntitiesAssignment_0() { return cEntitiesAssignment_0; }

		//ListofEntities
		public RuleCall getEntitiesListofEntitiesParserRuleCall_0_0() { return cEntitiesListofEntitiesParserRuleCall_0_0; }

		//mrBlocks=MRBlock
		public Assignment getMrBlocksAssignment_1() { return cMrBlocksAssignment_1; }

		//MRBlock
		public RuleCall getMrBlocksMRBlockParserRuleCall_1_0() { return cMrBlocksMRBlockParserRuleCall_1_0; }
	}

	public class ListofEntitiesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ListofEntities");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cListofEntitiesAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cMetaelementsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cEntitiesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cEntitiesEntityParserRuleCall_3_0 = (RuleCall)cEntitiesAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ListofEntities:
		//	{ListofEntities} "metaelements:" "{" entities+=Entity* "}";
		public ParserRule getRule() { return rule; }

		//{ListofEntities} "metaelements:" "{" entities+=Entity* "}"
		public Group getGroup() { return cGroup; }

		//{ListofEntities}
		public Action getListofEntitiesAction_0() { return cListofEntitiesAction_0; }

		//"metaelements:"
		public Keyword getMetaelementsKeyword_1() { return cMetaelementsKeyword_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//entities+=Entity*
		public Assignment getEntitiesAssignment_3() { return cEntitiesAssignment_3; }

		//Entity
		public RuleCall getEntitiesEntityParserRuleCall_3_0() { return cEntitiesEntityParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class MRBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MRBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMapreduceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLoopAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cLoopLoopKeyword_1_0 = (Keyword)cLoopAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cMapperAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMapperMapperParserRuleCall_3_0 = (RuleCall)cMapperAssignment_3.eContents().get(0);
		private final Assignment cReducerAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cReducerReducerParserRuleCall_4_0 = (RuleCall)cReducerAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//MRBlock:
		//	"mapreduce:" loop="loop"? "{" mapper=Mapper reducer=Reducer "}";
		public ParserRule getRule() { return rule; }

		//"mapreduce:" loop="loop"? "{" mapper=Mapper reducer=Reducer "}"
		public Group getGroup() { return cGroup; }

		//"mapreduce:"
		public Keyword getMapreduceKeyword_0() { return cMapreduceKeyword_0; }

		//loop="loop"?
		public Assignment getLoopAssignment_1() { return cLoopAssignment_1; }

		//"loop"
		public Keyword getLoopLoopKeyword_1_0() { return cLoopLoopKeyword_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//mapper=Mapper
		public Assignment getMapperAssignment_3() { return cMapperAssignment_3; }

		//Mapper
		public RuleCall getMapperMapperParserRuleCall_3_0() { return cMapperMapperParserRuleCall_3_0; }

		//reducer=Reducer
		public Assignment getReducerAssignment_4() { return cReducerAssignment_4; }

		//Reducer
		public RuleCall getReducerReducerParserRuleCall_4_0() { return cReducerReducerParserRuleCall_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class DeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Declaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cProgramKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cExtendKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cSuperNameAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cSuperNameIDTerminalRuleCall_2_1_0 = (RuleCall)cSuperNameAssignment_2_1.eContents().get(0);
		
		//Declaration:
		//	"program" name=ID ("extend" superName=ID)?;
		public ParserRule getRule() { return rule; }

		//"program" name=ID ("extend" superName=ID)?
		public Group getGroup() { return cGroup; }

		//"program"
		public Keyword getProgramKeyword_0() { return cProgramKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//("extend" superName=ID)?
		public Group getGroup_2() { return cGroup_2; }

		//"extend"
		public Keyword getExtendKeyword_2_0() { return cExtendKeyword_2_0; }

		//superName=ID
		public Assignment getSuperNameAssignment_2_1() { return cSuperNameAssignment_2_1; }

		//ID
		public RuleCall getSuperNameIDTerminalRuleCall_2_1_0() { return cSuperNameIDTerminalRuleCall_2_1_0; }
	}

	public class MapperElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Mapper");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMapKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cInkeyAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cInkeyArgumentParserRuleCall_2_0 = (RuleCall)cInkeyAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cInvalueAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cInvalueArgumentParserRuleCall_4_0 = (RuleCall)cInvalueAssignment_4.eContents().get(0);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cOutKeyTypeAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cOutKeyTypeSTRINGTerminalRuleCall_6_0 = (RuleCall)cOutKeyTypeAssignment_6.eContents().get(0);
		private final Keyword cCommaKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cOutValueTypeAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cOutValueTypeSTRINGTerminalRuleCall_8_0 = (RuleCall)cOutValueTypeAssignment_8.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Assignment cTextAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cTextBlockParserRuleCall_10_0 = (RuleCall)cTextAssignment_10.eContents().get(0);
		
		//Mapper:
		//	"map" "(" inkey=Argument "," invalue=Argument "," outKeyType=STRING "," outValueType=STRING ")" text=Block;
		public ParserRule getRule() { return rule; }

		//"map" "(" inkey=Argument "," invalue=Argument "," outKeyType=STRING "," outValueType=STRING ")" text=Block
		public Group getGroup() { return cGroup; }

		//"map"
		public Keyword getMapKeyword_0() { return cMapKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//inkey=Argument
		public Assignment getInkeyAssignment_2() { return cInkeyAssignment_2; }

		//Argument
		public RuleCall getInkeyArgumentParserRuleCall_2_0() { return cInkeyArgumentParserRuleCall_2_0; }

		//","
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }

		//invalue=Argument
		public Assignment getInvalueAssignment_4() { return cInvalueAssignment_4; }

		//Argument
		public RuleCall getInvalueArgumentParserRuleCall_4_0() { return cInvalueArgumentParserRuleCall_4_0; }

		//","
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }

		//outKeyType=STRING
		public Assignment getOutKeyTypeAssignment_6() { return cOutKeyTypeAssignment_6; }

		//STRING
		public RuleCall getOutKeyTypeSTRINGTerminalRuleCall_6_0() { return cOutKeyTypeSTRINGTerminalRuleCall_6_0; }

		//","
		public Keyword getCommaKeyword_7() { return cCommaKeyword_7; }

		//outValueType=STRING
		public Assignment getOutValueTypeAssignment_8() { return cOutValueTypeAssignment_8; }

		//STRING
		public RuleCall getOutValueTypeSTRINGTerminalRuleCall_8_0() { return cOutValueTypeSTRINGTerminalRuleCall_8_0; }

		//")"
		public Keyword getRightParenthesisKeyword_9() { return cRightParenthesisKeyword_9; }

		//text=Block
		public Assignment getTextAssignment_10() { return cTextAssignment_10; }

		//Block
		public RuleCall getTextBlockParserRuleCall_10_0() { return cTextBlockParserRuleCall_10_0; }
	}

	public class ArgumentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Argument");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeTypeParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cArgnameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cArgnameIDTerminalRuleCall_1_0 = (RuleCall)cArgnameAssignment_1.eContents().get(0);
		
		//Argument:
		//	type=Type argname=ID;
		public ParserRule getRule() { return rule; }

		//type=Type argname=ID
		public Group getGroup() { return cGroup; }

		//type=Type
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_0_0() { return cTypeTypeParserRuleCall_0_0; }

		//argname=ID
		public Assignment getArgnameAssignment_1() { return cArgnameAssignment_1; }

		//ID
		public RuleCall getArgnameIDTerminalRuleCall_1_0() { return cArgnameIDTerminalRuleCall_1_0; }
	}

	public class ListofArgumentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ListofArgument");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCommaKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeTypeParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cArgnameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cArgnameIDTerminalRuleCall_2_0 = (RuleCall)cArgnameAssignment_2.eContents().get(0);
		
		//ListofArgument:
		//	"," type=Type argname=ID;
		public ParserRule getRule() { return rule; }

		//"," type=Type argname=ID
		public Group getGroup() { return cGroup; }

		//","
		public Keyword getCommaKeyword_0() { return cCommaKeyword_0; }

		//type=Type
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_1_0() { return cTypeTypeParserRuleCall_1_0; }

		//argname=ID
		public Assignment getArgnameAssignment_2() { return cArgnameAssignment_2; }

		//ID
		public RuleCall getArgnameIDTerminalRuleCall_2_0() { return cArgnameIDTerminalRuleCall_2_0; }
	}

	public class ReducerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Reducer");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReduceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cInkeyAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cInkeySTRINGTerminalRuleCall_2_0 = (RuleCall)cInkeyAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cInvalueAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cInvalueSTRINGTerminalRuleCall_4_0 = (RuleCall)cInvalueAssignment_4.eContents().get(0);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cOutKeyTypeAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cOutKeyTypeSTRINGTerminalRuleCall_6_0 = (RuleCall)cOutKeyTypeAssignment_6.eContents().get(0);
		private final Keyword cCommaKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cOutValueTypeAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cOutValueTypeSTRINGTerminalRuleCall_8_0 = (RuleCall)cOutValueTypeAssignment_8.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Assignment cTextAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cTextBlockParserRuleCall_10_0 = (RuleCall)cTextAssignment_10.eContents().get(0);
		
		//Reducer:
		//	"reduce" "(" inkey=STRING "," invalue=STRING "," outKeyType=STRING "," outValueType=STRING ")" text=Block;
		public ParserRule getRule() { return rule; }

		//"reduce" "(" inkey=STRING "," invalue=STRING "," outKeyType=STRING "," outValueType=STRING ")" text=Block
		public Group getGroup() { return cGroup; }

		//"reduce"
		public Keyword getReduceKeyword_0() { return cReduceKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//inkey=STRING
		public Assignment getInkeyAssignment_2() { return cInkeyAssignment_2; }

		//STRING
		public RuleCall getInkeySTRINGTerminalRuleCall_2_0() { return cInkeySTRINGTerminalRuleCall_2_0; }

		//","
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }

		//invalue=STRING
		public Assignment getInvalueAssignment_4() { return cInvalueAssignment_4; }

		//STRING
		public RuleCall getInvalueSTRINGTerminalRuleCall_4_0() { return cInvalueSTRINGTerminalRuleCall_4_0; }

		//","
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }

		//outKeyType=STRING
		public Assignment getOutKeyTypeAssignment_6() { return cOutKeyTypeAssignment_6; }

		//STRING
		public RuleCall getOutKeyTypeSTRINGTerminalRuleCall_6_0() { return cOutKeyTypeSTRINGTerminalRuleCall_6_0; }

		//","
		public Keyword getCommaKeyword_7() { return cCommaKeyword_7; }

		//outValueType=STRING
		public Assignment getOutValueTypeAssignment_8() { return cOutValueTypeAssignment_8; }

		//STRING
		public RuleCall getOutValueTypeSTRINGTerminalRuleCall_8_0() { return cOutValueTypeSTRINGTerminalRuleCall_8_0; }

		//")"
		public Keyword getRightParenthesisKeyword_9() { return cRightParenthesisKeyword_9; }

		//text=Block
		public Assignment getTextAssignment_10() { return cTextAssignment_10; }

		//Block
		public RuleCall getTextBlockParserRuleCall_10_0() { return cTextBlockParserRuleCall_10_0; }
	}

	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cTypeIntKeyword_0_0 = (Keyword)cTypeAssignment_0.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cTypeFloatKeyword_1_0 = (Keyword)cTypeAssignment_1.eContents().get(0);
		private final Assignment cTypeAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final Keyword cTypeDoubleKeyword_2_0 = (Keyword)cTypeAssignment_2.eContents().get(0);
		private final Assignment cTypeAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final Keyword cTypeTextKeyword_3_0 = (Keyword)cTypeAssignment_3.eContents().get(0);
		private final Assignment cTypeAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final Keyword cTypeLongKeyword_4_0 = (Keyword)cTypeAssignment_4.eContents().get(0);
		private final Assignment cNameAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final RuleCall cNameIDTerminalRuleCall_5_0 = (RuleCall)cNameAssignment_5.eContents().get(0);
		
		//Type:
		//	type="int" | type="float" | type="double" | type="text" | type="long" | name=ID;
		public ParserRule getRule() { return rule; }

		//type="int" | type="float" | type="double" | type="text" | type="long" | name=ID
		public Alternatives getAlternatives() { return cAlternatives; }

		//type="int"
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//"int"
		public Keyword getTypeIntKeyword_0_0() { return cTypeIntKeyword_0_0; }

		//type="float"
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//"float"
		public Keyword getTypeFloatKeyword_1_0() { return cTypeFloatKeyword_1_0; }

		//type="double"
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//"double"
		public Keyword getTypeDoubleKeyword_2_0() { return cTypeDoubleKeyword_2_0; }

		//type="text"
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }

		//"text"
		public Keyword getTypeTextKeyword_3_0() { return cTypeTextKeyword_3_0; }

		//type="long"
		public Assignment getTypeAssignment_4() { return cTypeAssignment_4; }

		//"long"
		public Keyword getTypeLongKeyword_4_0() { return cTypeLongKeyword_4_0; }

		//name=ID
		public Assignment getNameAssignment_5() { return cNameAssignment_5; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_5_0() { return cNameIDTerminalRuleCall_5_0; }
	}

	public class EntityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Entity");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMetaelementKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cExtendKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cSuperTypeAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cSuperTypeEntityCrossReference_2_1_0 = (CrossReference)cSuperTypeAssignment_2_1.eContents().get(0);
		private final RuleCall cSuperTypeEntityIDTerminalRuleCall_2_1_0_1 = (RuleCall)cSuperTypeEntityCrossReference_2_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cFeaturesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cFeaturesFeatureParserRuleCall_4_0 = (RuleCall)cFeaturesAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Entity:
		//	"metaelement" name=ID ("extend" superType=[Entity])? "{" features+=Feature+ "}";
		public ParserRule getRule() { return rule; }

		//"metaelement" name=ID ("extend" superType=[Entity])? "{" features+=Feature+ "}"
		public Group getGroup() { return cGroup; }

		//"metaelement"
		public Keyword getMetaelementKeyword_0() { return cMetaelementKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//("extend" superType=[Entity])?
		public Group getGroup_2() { return cGroup_2; }

		//"extend"
		public Keyword getExtendKeyword_2_0() { return cExtendKeyword_2_0; }

		//superType=[Entity]
		public Assignment getSuperTypeAssignment_2_1() { return cSuperTypeAssignment_2_1; }

		//[Entity]
		public CrossReference getSuperTypeEntityCrossReference_2_1_0() { return cSuperTypeEntityCrossReference_2_1_0; }

		//ID
		public RuleCall getSuperTypeEntityIDTerminalRuleCall_2_1_0_1() { return cSuperTypeEntityIDTerminalRuleCall_2_1_0_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//features+=Feature+
		public Assignment getFeaturesAssignment_4() { return cFeaturesAssignment_4; }

		//Feature
		public RuleCall getFeaturesFeatureParserRuleCall_4_0() { return cFeaturesFeatureParserRuleCall_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class FeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Feature");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cTypeAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cTypeTypeRefParserRuleCall_0_0_0 = (RuleCall)cTypeAssignment_0_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0_1_0 = (RuleCall)cNameAssignment_0_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cReadorWriteAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cReadorWriteReadorWriteParserRuleCall_1_0_0 = (RuleCall)cReadorWriteAssignment_1_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//Feature:
		//	type=TypeRef name=ID ";" | readorWrite=ReadorWrite ";";
		public ParserRule getRule() { return rule; }

		//type=TypeRef name=ID ";" | readorWrite=ReadorWrite ";"
		public Alternatives getAlternatives() { return cAlternatives; }

		//type=TypeRef name=ID ";"
		public Group getGroup_0() { return cGroup_0; }

		//type=TypeRef
		public Assignment getTypeAssignment_0_0() { return cTypeAssignment_0_0; }

		//TypeRef
		public RuleCall getTypeTypeRefParserRuleCall_0_0_0() { return cTypeTypeRefParserRuleCall_0_0_0; }

		//name=ID
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_1_0() { return cNameIDTerminalRuleCall_0_1_0; }

		//";"
		public Keyword getSemicolonKeyword_0_2() { return cSemicolonKeyword_0_2; }

		//readorWrite=ReadorWrite ";"
		public Group getGroup_1() { return cGroup_1; }

		//readorWrite=ReadorWrite
		public Assignment getReadorWriteAssignment_1_0() { return cReadorWriteAssignment_1_0; }

		//ReadorWrite
		public RuleCall getReadorWriteReadorWriteParserRuleCall_1_0_0() { return cReadorWriteReadorWriteParserRuleCall_1_0_0; }

		//";"
		public Keyword getSemicolonKeyword_1_1() { return cSemicolonKeyword_1_1; }
	}

	public class ReadorWriteElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ReadorWrite");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cReadKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cTokenAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cTokenSTRINGTerminalRuleCall_0_2_0 = (RuleCall)cTokenAssignment_0_2.eContents().get(0);
		private final Keyword cCommaKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Assignment cReadvalAssignment_0_4 = (Assignment)cGroup_0.eContents().get(4);
		private final RuleCall cReadvalSTRINGTerminalRuleCall_0_4_0 = (RuleCall)cReadvalAssignment_0_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_5 = (Keyword)cGroup_0.eContents().get(5);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cWriteKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cTokenAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cTokenSTRINGTerminalRuleCall_1_2_0 = (RuleCall)cTokenAssignment_1_2.eContents().get(0);
		private final Keyword cCommaKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Assignment cWritevalAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cWritevalSTRINGTerminalRuleCall_1_4_0 = (RuleCall)cWritevalAssignment_1_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_5 = (Keyword)cGroup_1.eContents().get(5);
		
		//ReadorWrite:
		//	"read" "(" token=STRING "," readval=STRING ")" | "write" "(" token=STRING "," writeval=STRING ")";
		public ParserRule getRule() { return rule; }

		//"read" "(" token=STRING "," readval=STRING ")" | "write" "(" token=STRING "," writeval=STRING ")"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"read" "(" token=STRING "," readval=STRING ")"
		public Group getGroup_0() { return cGroup_0; }

		//"read"
		public Keyword getReadKeyword_0_0() { return cReadKeyword_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_0_1() { return cLeftParenthesisKeyword_0_1; }

		//token=STRING
		public Assignment getTokenAssignment_0_2() { return cTokenAssignment_0_2; }

		//STRING
		public RuleCall getTokenSTRINGTerminalRuleCall_0_2_0() { return cTokenSTRINGTerminalRuleCall_0_2_0; }

		//","
		public Keyword getCommaKeyword_0_3() { return cCommaKeyword_0_3; }

		//readval=STRING
		public Assignment getReadvalAssignment_0_4() { return cReadvalAssignment_0_4; }

		//STRING
		public RuleCall getReadvalSTRINGTerminalRuleCall_0_4_0() { return cReadvalSTRINGTerminalRuleCall_0_4_0; }

		//")"
		public Keyword getRightParenthesisKeyword_0_5() { return cRightParenthesisKeyword_0_5; }

		//"write" "(" token=STRING "," writeval=STRING ")"
		public Group getGroup_1() { return cGroup_1; }

		//"write"
		public Keyword getWriteKeyword_1_0() { return cWriteKeyword_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_1() { return cLeftParenthesisKeyword_1_1; }

		//token=STRING
		public Assignment getTokenAssignment_1_2() { return cTokenAssignment_1_2; }

		//STRING
		public RuleCall getTokenSTRINGTerminalRuleCall_1_2_0() { return cTokenSTRINGTerminalRuleCall_1_2_0; }

		//","
		public Keyword getCommaKeyword_1_3() { return cCommaKeyword_1_3; }

		//writeval=STRING
		public Assignment getWritevalAssignment_1_4() { return cWritevalAssignment_1_4; }

		//STRING
		public RuleCall getWritevalSTRINGTerminalRuleCall_1_4_0() { return cWritevalSTRINGTerminalRuleCall_1_4_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_5() { return cRightParenthesisKeyword_1_5; }
	}

	public class TypeRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TypeRef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cReferencedAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cReferencedTypeParserRuleCall_0_0 = (RuleCall)cReferencedAssignment_0.eContents().get(0);
		private final Assignment cMultiAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cMultiAsteriskKeyword_1_0 = (Keyword)cMultiAssignment_1.eContents().get(0);
		
		//TypeRef:
		//	referenced=Type multi?="*"?;
		public ParserRule getRule() { return rule; }

		//referenced=Type multi?="*"?
		public Group getGroup() { return cGroup; }

		//referenced=Type
		public Assignment getReferencedAssignment_0() { return cReferencedAssignment_0; }

		//Type
		public RuleCall getReferencedTypeParserRuleCall_0_0() { return cReferencedTypeParserRuleCall_0_0; }

		//multi?="*"?
		public Assignment getMultiAssignment_1() { return cMultiAssignment_1; }

		//"*"
		public Keyword getMultiAsteriskKeyword_1_0() { return cMultiAsteriskKeyword_1_0; }
	}

	public class BlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Block");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cBlockAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cBlockLeftSquareBracketKeyword_0_0 = (Keyword)cBlockAssignment_0.eContents().get(0);
		private final Assignment cJavafunctionsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cJavafunctionsJavaFunctionParserRuleCall_1_0 = (RuleCall)cJavafunctionsAssignment_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Block:
		//	block="[" javafunctions+=JavaFunction* "]";
		public ParserRule getRule() { return rule; }

		//block="[" javafunctions+=JavaFunction* "]"
		public Group getGroup() { return cGroup; }

		//block="["
		public Assignment getBlockAssignment_0() { return cBlockAssignment_0; }

		//"["
		public Keyword getBlockLeftSquareBracketKeyword_0_0() { return cBlockLeftSquareBracketKeyword_0_0; }

		//javafunctions+=JavaFunction*
		public Assignment getJavafunctionsAssignment_1() { return cJavafunctionsAssignment_1; }

		//JavaFunction
		public RuleCall getJavafunctionsJavaFunctionParserRuleCall_1_0() { return cJavafunctionsJavaFunctionParserRuleCall_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_2() { return cRightSquareBracketKeyword_2; }
	}

	public class JavaFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "JavaFunction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTimeofCallAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTimeofCallTimeOfCallParserRuleCall_0_0 = (RuleCall)cTimeofCallAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cParamnameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cParamnameIDTerminalRuleCall_2_0 = (RuleCall)cParamnameAssignment_2.eContents().get(0);
		
		//JavaFunction:
		//	timeofCall=TimeOfCall ":" paramname=ID;
		public ParserRule getRule() { return rule; }

		//timeofCall=TimeOfCall ":" paramname=ID
		public Group getGroup() { return cGroup; }

		//timeofCall=TimeOfCall
		public Assignment getTimeofCallAssignment_0() { return cTimeofCallAssignment_0; }

		//TimeOfCall
		public RuleCall getTimeofCallTimeOfCallParserRuleCall_0_0() { return cTimeofCallTimeOfCallParserRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//paramname=ID
		public Assignment getParamnameAssignment_2() { return cParamnameAssignment_2; }

		//ID
		public RuleCall getParamnameIDTerminalRuleCall_2_0() { return cParamnameIDTerminalRuleCall_2_0; }
	}

	public class TimeOfCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TimeOfCall");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cAfterKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cCallKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cBeforeKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//TimeOfCall returns ecore::EString:
		//	"after" | "call" | "before";
		public ParserRule getRule() { return rule; }

		//"after" | "call" | "before"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"after"
		public Keyword getAfterKeyword_0() { return cAfterKeyword_0; }

		//"call"
		public Keyword getCallKeyword_1() { return cCallKeyword_1; }

		//"before"
		public Keyword getBeforeKeyword_2() { return cBeforeKeyword_2; }
	}
	
	
	private MapRedoopElements pMapRedoop;
	private ContentElements pContent;
	private ListofEntitiesElements pListofEntities;
	private MRBlockElements pMRBlock;
	private DeclarationElements pDeclaration;
	private MapperElements pMapper;
	private ArgumentElements pArgument;
	private ListofArgumentElements pListofArgument;
	private ReducerElements pReducer;
	private TypeElements pType;
	private EntityElements pEntity;
	private FeatureElements pFeature;
	private ReadorWriteElements pReadorWrite;
	private TypeRefElements pTypeRef;
	private BlockElements pBlock;
	private JavaFunctionElements pJavaFunction;
	private TimeOfCallElements pTimeOfCall;
	
	private final GrammarProvider grammarProvider;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public MapRedoopGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammarProvider = grammarProvider;
		this.gaTerminals = gaTerminals;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//MapRedoop:
	//	declaration=Declaration "{" content+=Content* "}";
	public MapRedoopElements getMapRedoopAccess() {
		return (pMapRedoop != null) ? pMapRedoop : (pMapRedoop = new MapRedoopElements());
	}
	
	public ParserRule getMapRedoopRule() {
		return getMapRedoopAccess().getRule();
	}

	//Content:
	//	entities=ListofEntities | mrBlocks=MRBlock;
	public ContentElements getContentAccess() {
		return (pContent != null) ? pContent : (pContent = new ContentElements());
	}
	
	public ParserRule getContentRule() {
		return getContentAccess().getRule();
	}

	//ListofEntities:
	//	{ListofEntities} "metaelements:" "{" entities+=Entity* "}";
	public ListofEntitiesElements getListofEntitiesAccess() {
		return (pListofEntities != null) ? pListofEntities : (pListofEntities = new ListofEntitiesElements());
	}
	
	public ParserRule getListofEntitiesRule() {
		return getListofEntitiesAccess().getRule();
	}

	//MRBlock:
	//	"mapreduce:" loop="loop"? "{" mapper=Mapper reducer=Reducer "}";
	public MRBlockElements getMRBlockAccess() {
		return (pMRBlock != null) ? pMRBlock : (pMRBlock = new MRBlockElements());
	}
	
	public ParserRule getMRBlockRule() {
		return getMRBlockAccess().getRule();
	}

	//Declaration:
	//	"program" name=ID ("extend" superName=ID)?;
	public DeclarationElements getDeclarationAccess() {
		return (pDeclaration != null) ? pDeclaration : (pDeclaration = new DeclarationElements());
	}
	
	public ParserRule getDeclarationRule() {
		return getDeclarationAccess().getRule();
	}

	//Mapper:
	//	"map" "(" inkey=Argument "," invalue=Argument "," outKeyType=STRING "," outValueType=STRING ")" text=Block;
	public MapperElements getMapperAccess() {
		return (pMapper != null) ? pMapper : (pMapper = new MapperElements());
	}
	
	public ParserRule getMapperRule() {
		return getMapperAccess().getRule();
	}

	//Argument:
	//	type=Type argname=ID;
	public ArgumentElements getArgumentAccess() {
		return (pArgument != null) ? pArgument : (pArgument = new ArgumentElements());
	}
	
	public ParserRule getArgumentRule() {
		return getArgumentAccess().getRule();
	}

	//ListofArgument:
	//	"," type=Type argname=ID;
	public ListofArgumentElements getListofArgumentAccess() {
		return (pListofArgument != null) ? pListofArgument : (pListofArgument = new ListofArgumentElements());
	}
	
	public ParserRule getListofArgumentRule() {
		return getListofArgumentAccess().getRule();
	}

	//Reducer:
	//	"reduce" "(" inkey=STRING "," invalue=STRING "," outKeyType=STRING "," outValueType=STRING ")" text=Block;
	public ReducerElements getReducerAccess() {
		return (pReducer != null) ? pReducer : (pReducer = new ReducerElements());
	}
	
	public ParserRule getReducerRule() {
		return getReducerAccess().getRule();
	}

	//Type:
	//	type="int" | type="float" | type="double" | type="text" | type="long" | name=ID;
	public TypeElements getTypeAccess() {
		return (pType != null) ? pType : (pType = new TypeElements());
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}

	//Entity:
	//	"metaelement" name=ID ("extend" superType=[Entity])? "{" features+=Feature+ "}";
	public EntityElements getEntityAccess() {
		return (pEntity != null) ? pEntity : (pEntity = new EntityElements());
	}
	
	public ParserRule getEntityRule() {
		return getEntityAccess().getRule();
	}

	//Feature:
	//	type=TypeRef name=ID ";" | readorWrite=ReadorWrite ";";
	public FeatureElements getFeatureAccess() {
		return (pFeature != null) ? pFeature : (pFeature = new FeatureElements());
	}
	
	public ParserRule getFeatureRule() {
		return getFeatureAccess().getRule();
	}

	//ReadorWrite:
	//	"read" "(" token=STRING "," readval=STRING ")" | "write" "(" token=STRING "," writeval=STRING ")";
	public ReadorWriteElements getReadorWriteAccess() {
		return (pReadorWrite != null) ? pReadorWrite : (pReadorWrite = new ReadorWriteElements());
	}
	
	public ParserRule getReadorWriteRule() {
		return getReadorWriteAccess().getRule();
	}

	//TypeRef:
	//	referenced=Type multi?="*"?;
	public TypeRefElements getTypeRefAccess() {
		return (pTypeRef != null) ? pTypeRef : (pTypeRef = new TypeRefElements());
	}
	
	public ParserRule getTypeRefRule() {
		return getTypeRefAccess().getRule();
	}

	//Block:
	//	block="[" javafunctions+=JavaFunction* "]";
	public BlockElements getBlockAccess() {
		return (pBlock != null) ? pBlock : (pBlock = new BlockElements());
	}
	
	public ParserRule getBlockRule() {
		return getBlockAccess().getRule();
	}

	//JavaFunction:
	//	timeofCall=TimeOfCall ":" paramname=ID;
	public JavaFunctionElements getJavaFunctionAccess() {
		return (pJavaFunction != null) ? pJavaFunction : (pJavaFunction = new JavaFunctionElements());
	}
	
	public ParserRule getJavaFunctionRule() {
		return getJavaFunctionAccess().getRule();
	}

	//TimeOfCall returns ecore::EString:
	//	"after" | "call" | "before";
	public TimeOfCallElements getTimeOfCallAccess() {
		return (pTimeOfCall != null) ? pTimeOfCall : (pTimeOfCall = new TimeOfCallElements());
	}
	
	public ParserRule getTimeOfCallRule() {
		return getTimeOfCallAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" | "n" |
	//	"f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
