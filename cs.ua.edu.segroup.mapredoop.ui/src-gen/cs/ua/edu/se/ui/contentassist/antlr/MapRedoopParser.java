/*
* generated by Xtext
*/
package cs.ua.edu.se.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import cs.ua.edu.se.services.MapRedoopGrammarAccess;

public class MapRedoopParser extends AbstractContentAssistParser {
	
	@Inject
	private MapRedoopGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected cs.ua.edu.se.ui.contentassist.antlr.internal.InternalMapRedoopParser createParser() {
		cs.ua.edu.se.ui.contentassist.antlr.internal.InternalMapRedoopParser result = new cs.ua.edu.se.ui.contentassist.antlr.internal.InternalMapRedoopParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getContentAccess().getAlternatives(), "rule__Content__Alternatives");
					put(grammarAccess.getTypeAccess().getAlternatives(), "rule__Type__Alternatives");
					put(grammarAccess.getFeatureAccess().getAlternatives(), "rule__Feature__Alternatives");
					put(grammarAccess.getReadorWriteAccess().getAlternatives(), "rule__ReadorWrite__Alternatives");
					put(grammarAccess.getTimeOfCallAccess().getAlternatives(), "rule__TimeOfCall__Alternatives");
					put(grammarAccess.getMapRedoopAccess().getGroup(), "rule__MapRedoop__Group__0");
					put(grammarAccess.getListofEntitiesAccess().getGroup(), "rule__ListofEntities__Group__0");
					put(grammarAccess.getMRBlockAccess().getGroup(), "rule__MRBlock__Group__0");
					put(grammarAccess.getDeclarationAccess().getGroup(), "rule__Declaration__Group__0");
					put(grammarAccess.getDeclarationAccess().getGroup_2(), "rule__Declaration__Group_2__0");
					put(grammarAccess.getMapperAccess().getGroup(), "rule__Mapper__Group__0");
					put(grammarAccess.getArgumentAccess().getGroup(), "rule__Argument__Group__0");
					put(grammarAccess.getListofArgumentAccess().getGroup(), "rule__ListofArgument__Group__0");
					put(grammarAccess.getReducerAccess().getGroup(), "rule__Reducer__Group__0");
					put(grammarAccess.getEntityAccess().getGroup(), "rule__Entity__Group__0");
					put(grammarAccess.getEntityAccess().getGroup_2(), "rule__Entity__Group_2__0");
					put(grammarAccess.getFeatureAccess().getGroup_0(), "rule__Feature__Group_0__0");
					put(grammarAccess.getFeatureAccess().getGroup_1(), "rule__Feature__Group_1__0");
					put(grammarAccess.getReadorWriteAccess().getGroup_0(), "rule__ReadorWrite__Group_0__0");
					put(grammarAccess.getReadorWriteAccess().getGroup_1(), "rule__ReadorWrite__Group_1__0");
					put(grammarAccess.getTypeRefAccess().getGroup(), "rule__TypeRef__Group__0");
					put(grammarAccess.getBlockAccess().getGroup(), "rule__Block__Group__0");
					put(grammarAccess.getJavaFunctionAccess().getGroup(), "rule__JavaFunction__Group__0");
					put(grammarAccess.getMapRedoopAccess().getDeclarationAssignment_0(), "rule__MapRedoop__DeclarationAssignment_0");
					put(grammarAccess.getMapRedoopAccess().getContentAssignment_2(), "rule__MapRedoop__ContentAssignment_2");
					put(grammarAccess.getContentAccess().getEntitiesAssignment_0(), "rule__Content__EntitiesAssignment_0");
					put(grammarAccess.getContentAccess().getMrBlocksAssignment_1(), "rule__Content__MrBlocksAssignment_1");
					put(grammarAccess.getListofEntitiesAccess().getEntitiesAssignment_3(), "rule__ListofEntities__EntitiesAssignment_3");
					put(grammarAccess.getMRBlockAccess().getLoopAssignment_1(), "rule__MRBlock__LoopAssignment_1");
					put(grammarAccess.getMRBlockAccess().getMapperAssignment_3(), "rule__MRBlock__MapperAssignment_3");
					put(grammarAccess.getMRBlockAccess().getReducerAssignment_4(), "rule__MRBlock__ReducerAssignment_4");
					put(grammarAccess.getDeclarationAccess().getNameAssignment_1(), "rule__Declaration__NameAssignment_1");
					put(grammarAccess.getDeclarationAccess().getSuperNameAssignment_2_1(), "rule__Declaration__SuperNameAssignment_2_1");
					put(grammarAccess.getMapperAccess().getInkeyAssignment_2(), "rule__Mapper__InkeyAssignment_2");
					put(grammarAccess.getMapperAccess().getInvalueAssignment_4(), "rule__Mapper__InvalueAssignment_4");
					put(grammarAccess.getMapperAccess().getOutKeyTypeAssignment_6(), "rule__Mapper__OutKeyTypeAssignment_6");
					put(grammarAccess.getMapperAccess().getOutValueTypeAssignment_8(), "rule__Mapper__OutValueTypeAssignment_8");
					put(grammarAccess.getMapperAccess().getTextAssignment_10(), "rule__Mapper__TextAssignment_10");
					put(grammarAccess.getArgumentAccess().getTypeAssignment_0(), "rule__Argument__TypeAssignment_0");
					put(grammarAccess.getArgumentAccess().getArgnameAssignment_1(), "rule__Argument__ArgnameAssignment_1");
					put(grammarAccess.getListofArgumentAccess().getTypeAssignment_1(), "rule__ListofArgument__TypeAssignment_1");
					put(grammarAccess.getListofArgumentAccess().getArgnameAssignment_2(), "rule__ListofArgument__ArgnameAssignment_2");
					put(grammarAccess.getReducerAccess().getInkeyAssignment_2(), "rule__Reducer__InkeyAssignment_2");
					put(grammarAccess.getReducerAccess().getInvalueAssignment_4(), "rule__Reducer__InvalueAssignment_4");
					put(grammarAccess.getReducerAccess().getOutKeyTypeAssignment_6(), "rule__Reducer__OutKeyTypeAssignment_6");
					put(grammarAccess.getReducerAccess().getOutValueTypeAssignment_8(), "rule__Reducer__OutValueTypeAssignment_8");
					put(grammarAccess.getReducerAccess().getTextAssignment_10(), "rule__Reducer__TextAssignment_10");
					put(grammarAccess.getTypeAccess().getTypeAssignment_0(), "rule__Type__TypeAssignment_0");
					put(grammarAccess.getTypeAccess().getTypeAssignment_1(), "rule__Type__TypeAssignment_1");
					put(grammarAccess.getTypeAccess().getTypeAssignment_2(), "rule__Type__TypeAssignment_2");
					put(grammarAccess.getTypeAccess().getTypeAssignment_3(), "rule__Type__TypeAssignment_3");
					put(grammarAccess.getTypeAccess().getTypeAssignment_4(), "rule__Type__TypeAssignment_4");
					put(grammarAccess.getTypeAccess().getNameAssignment_5(), "rule__Type__NameAssignment_5");
					put(grammarAccess.getEntityAccess().getNameAssignment_1(), "rule__Entity__NameAssignment_1");
					put(grammarAccess.getEntityAccess().getSuperTypeAssignment_2_1(), "rule__Entity__SuperTypeAssignment_2_1");
					put(grammarAccess.getEntityAccess().getFeaturesAssignment_4(), "rule__Entity__FeaturesAssignment_4");
					put(grammarAccess.getFeatureAccess().getTypeAssignment_0_0(), "rule__Feature__TypeAssignment_0_0");
					put(grammarAccess.getFeatureAccess().getNameAssignment_0_1(), "rule__Feature__NameAssignment_0_1");
					put(grammarAccess.getFeatureAccess().getReadorWriteAssignment_1_0(), "rule__Feature__ReadorWriteAssignment_1_0");
					put(grammarAccess.getReadorWriteAccess().getTokenAssignment_0_2(), "rule__ReadorWrite__TokenAssignment_0_2");
					put(grammarAccess.getReadorWriteAccess().getReadvalAssignment_0_4(), "rule__ReadorWrite__ReadvalAssignment_0_4");
					put(grammarAccess.getReadorWriteAccess().getTokenAssignment_1_2(), "rule__ReadorWrite__TokenAssignment_1_2");
					put(grammarAccess.getReadorWriteAccess().getWritevalAssignment_1_4(), "rule__ReadorWrite__WritevalAssignment_1_4");
					put(grammarAccess.getTypeRefAccess().getReferencedAssignment_0(), "rule__TypeRef__ReferencedAssignment_0");
					put(grammarAccess.getTypeRefAccess().getMultiAssignment_1(), "rule__TypeRef__MultiAssignment_1");
					put(grammarAccess.getBlockAccess().getBlockAssignment_0(), "rule__Block__BlockAssignment_0");
					put(grammarAccess.getBlockAccess().getJavafunctionsAssignment_1(), "rule__Block__JavafunctionsAssignment_1");
					put(grammarAccess.getJavaFunctionAccess().getTimeofCallAssignment_0(), "rule__JavaFunction__TimeofCallAssignment_0");
					put(grammarAccess.getJavaFunctionAccess().getParamnameAssignment_2(), "rule__JavaFunction__ParamnameAssignment_2");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			cs.ua.edu.se.ui.contentassist.antlr.internal.InternalMapRedoopParser typedParser = (cs.ua.edu.se.ui.contentassist.antlr.internal.InternalMapRedoopParser) parser;
			typedParser.entryRuleMapRedoop();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public MapRedoopGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(MapRedoopGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
